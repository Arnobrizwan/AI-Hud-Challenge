apiVersion: apps/v1
kind: Deployment
metadata:
  name: mlops-orchestration-service
  namespace: mlops
  labels:
    app: mlops-orchestration-service
    version: v1.0.0
spec:
  replicas: 3
  selector:
    matchLabels:
      app: mlops-orchestration-service
  template:
    metadata:
      labels:
        app: mlops-orchestration-service
        version: v1.0.0
    spec:
      serviceAccountName: mlops-orchestration-service
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        fsGroup: 2000
      containers:
      - name: mlops-orchestration-service
        image: mlops-orchestration-service:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 8000
          name: http
          protocol: TCP
        - containerPort: 9090
          name: metrics
          protocol: TCP
        env:
        - name: ENVIRONMENT
          value: "production"
        - name: LOG_LEVEL
          value: "INFO"
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: mlops-secrets
              key: database-url
        - name: REDIS_URL
          valueFrom:
            secretKeyRef:
              name: mlops-secrets
              key: redis-url
        - name: VERTEX_AI_PROJECT_ID
          valueFrom:
            secretKeyRef:
              name: mlops-secrets
              key: vertex-ai-project-id
        - name: VERTEX_AI_SERVICE_ACCOUNT
          valueFrom:
            secretKeyRef:
              name: mlops-secrets
              key: vertex-ai-service-account
        - name: MLFLOW_TRACKING_URI
          valueFrom:
            secretKeyRef:
              name: mlops-secrets
              key: mlflow-tracking-uri
        - name: SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: mlops-secrets
              key: secret-key
        resources:
          requests:
            memory: "2Gi"
            cpu: "1000m"
            ephemeral-storage: "10Gi"
          limits:
            memory: "4Gi"
            cpu: "2000m"
            ephemeral-storage: "20Gi"
        livenessProbe:
          httpGet:
            path: /health/live
            port: 8000
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health/ready
            port: 8000
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        volumeMounts:
        - name: config-volume
          mountPath: /app/config
          readOnly: true
        - name: logs-volume
          mountPath: /app/logs
        - name: models-volume
          mountPath: /app/models
      volumes:
      - name: config-volume
        configMap:
          name: mlops-config
      - name: logs-volume
        persistentVolumeClaim:
          claimName: mlops-logs-pvc
      - name: models-volume
        persistentVolumeClaim:
          claimName: mlops-models-pvc
      nodeSelector:
        kubernetes.io/os: linux
      tolerations:
      - key: "mlops-workload"
        operator: "Equal"
        value: "true"
        effect: "NoSchedule"
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: "mlops-workload"
                operator: "In"
                values: ["true"]
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values: ["mlops-orchestration-service"]
              topologyKey: kubernetes.io/hostname
---
apiVersion: v1
kind: Service
metadata:
  name: mlops-orchestration-service
  namespace: mlops
  labels:
    app: mlops-orchestration-service
spec:
  type: ClusterIP
  ports:
  - port: 8000
    targetPort: 8000
    protocol: TCP
    name: http
  - port: 9090
    targetPort: 9090
    protocol: TCP
    name: metrics
  selector:
    app: mlops-orchestration-service
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: mlops-orchestration-service
  namespace: mlops
  labels:
    app: mlops-orchestration-service
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  namespace: mlops
  name: mlops-orchestration-service
rules:
- apiGroups: [""]
  resources: ["pods", "services", "configmaps", "secrets"]
  verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
- apiGroups: ["apps"]
  resources: ["deployments", "replicasets"]
  verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
- apiGroups: ["batch"]
  resources: ["jobs", "cronjobs"]
  verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
- apiGroups: ["networking.k8s.io"]
  resources: ["ingresses"]
  verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: mlops-orchestration-service
  namespace: mlops
subjects:
- kind: ServiceAccount
  name: mlops-orchestration-service
  namespace: mlops
roleRef:
  kind: Role
  name: mlops-orchestration-service
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: mlops-config
  namespace: mlops
  labels:
    app: mlops-orchestration-service
data:
  app.yaml: |
    app:
      name: "MLOps Orchestration Service"
      environment: "production"
      debug: false
      log_level: "INFO"
    
    server:
      host: "0.0.0.0"
      port: 8000
      workers: 3
    
    database:
      pool_size: 10
      max_overflow: 20
      timeout: 30
    
    redis:
      db: 0
      timeout: 5
    
    airflow:
      webserver_url: "http://airflow-webserver:8080"
      api_url: "http://airflow-webserver:8080/api/v1"
      dag_folder: "/opt/airflow/dags"
    
    vertex_ai:
      region: "us-central1"
      staging_bucket: "mlops-staging-bucket"
    
    mlflow:
      experiment_prefix: "mlops"
    
    monitoring:
      enabled: true
      prometheus_url: "http://prometheus:9090"
      grafana_url: "http://grafana:3000"
    
    retraining:
      check_interval: 300
      max_concurrent: 3
      timeout: 3600
    
    security:
      jwt_algorithm: "HS256"
      jwt_expiration_hours: 24
    
    rate_limiting:
      requests: 100
      window: 60
    
    resources:
      max_concurrent_pipelines: 10
      max_concurrent_training_jobs: 5
      max_concurrent_deployments: 3
---
apiVersion: v1
kind: Secret
metadata:
  name: mlops-secrets
  namespace: mlops
  labels:
    app: mlops-orchestration-service
type: Opaque
data:
  # Base64 encoded values - replace with actual values
  database-url: cG9zdGdyZXNxbDovL3VzZXI6cGFzc3dvcmRAZGI6NTQzMi9tbG9wcw==
  redis-url: cmVkaXM6Ly9yZWRpczozMjc2Nw==
  vertex-ai-project-id: bXktcHJvamVjdC1pZA==
  vertex-ai-service-account: eW91ci1zZXJ2aWNlLWFjY291bnQta2V5LWpzb24=
  mlflow-tracking-uri: aHR0cDovL21sZmxvdy1zZXJ2ZXI6NTAwMA==
  secret-key: eW91ci1zZWNyZXQta2V5LWhlcmU=
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mlops-logs-pvc
  namespace: mlops
  labels:
    app: mlops-orchestration-service
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
  storageClassName: standard
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mlops-models-pvc
  namespace: mlops
  labels:
    app: mlops-orchestration-service
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 50Gi
  storageClassName: standard
---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: mlops-orchestration-service-hpa
  namespace: mlops
  labels:
    app: mlops-orchestration-service
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: mlops-orchestration-service
  minReplicas: 3
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 10
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60
      - type: Pods
        value: 2
        periodSeconds: 60
      selectPolicy: Max
