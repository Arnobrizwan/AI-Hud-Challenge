version: '3.8'

services:
  # MLOps Orchestration Service
  mlops-service:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    ports:
      - "8000:8000"
      - "9090:9090"
    environment:
      - ENVIRONMENT=development
      - DEBUG=true
      - LOG_LEVEL=DEBUG
      - DATABASE_URL=postgresql://mlops:mlops@postgres:5432/mlops
      - REDIS_URL=redis://redis:6379
      - AIRFLOW_WEBSERVER_URL=http://airflow-webserver:8080
      - AIRFLOW_API_URL=http://airflow-webserver:8080/api/v1
      - VERTEX_AI_PROJECT_ID=${VERTEX_AI_PROJECT_ID}
      - VERTEX_AI_SERVICE_ACCOUNT=${VERTEX_AI_SERVICE_ACCOUNT}
      - MLFLOW_TRACKING_URI=http://mlflow:5000
      - MLFLOW_REGISTRY_URI=http://mlflow:5000
      - PROMETHEUS_URL=http://prometheus:9090
      - GRAFANA_URL=http://grafana:3000
      - SECRET_KEY=your-secret-key-here
    volumes:
      - ./src:/app/src
      - ./airflow_dags:/app/airflow_dags
      - ./logs:/app/logs
      - ./models:/app/models
      - ./data:/app/data
    depends_on:
      - postgres
      - redis
      - mlflow
      - prometheus
      - grafana
    networks:
      - mlops-network
    restart: unless-stopped

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=mlops
      - POSTGRES_USER=mlops
      - POSTGRES_PASSWORD=mlops
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - mlops-network
    restart: unless-stopped

  # Redis Cache
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./redis.conf:/usr/local/etc/redis/redis.conf
    command: redis-server /usr/local/etc/redis/redis.conf
    networks:
      - mlops-network
    restart: unless-stopped

  # MLflow Tracking Server
  mlflow:
    image: python:3.9-slim
    ports:
      - "5000:5000"
    environment:
      - MLFLOW_BACKEND_STORE_URI=postgresql://mlops:mlops@postgres:5432/mlops
      - MLFLOW_DEFAULT_ARTIFACT_ROOT=/mlflow/artifacts
    volumes:
      - mlflow_artifacts:/mlflow/artifacts
    command: >
      sh -c "
        pip install mlflow psycopg2-binary &&
        mlflow server
        --backend-store-uri postgresql://mlops:mlops@postgres:5432/mlops
        --default-artifact-root /mlflow/artifacts
        --host 0.0.0.0
        --port 5000
      "
    depends_on:
      - postgres
    networks:
      - mlops-network
    restart: unless-stopped

  # Airflow Webserver
  airflow-webserver:
    image: apache/airflow:2.7.3
    environment:
      - AIRFLOW__CORE__EXECUTOR=LocalExecutor
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql://mlops:mlops@postgres:5432/mlops
      - AIRFLOW__CORE__DAGS_FOLDER=/opt/airflow/dags
      - AIRFLOW__CORE__LOAD_EXAMPLES=False
      - AIRFLOW__WEBSERVER__EXPOSE_CONFIG=True
      - AIRFLOW__WEBSERVER__SECRET_KEY=your-secret-key-here
      - AIRFLOW__CORE__FERNET_KEY=your-fernet-key-here
    ports:
      - "8080:8080"
    volumes:
      - ./airflow_dags:/opt/airflow/dags
      - airflow_logs:/opt/airflow/logs
    depends_on:
      - postgres
    networks:
      - mlops-network
    restart: unless-stopped
    command: >
      sh -c "
        airflow db init &&
        airflow users create
        --username admin
        --firstname Admin
        --lastname User
        --role Admin
        --email admin@example.com
        --password admin &&
        airflow webserver --port 8080
      "

  # Airflow Scheduler
  airflow-scheduler:
    image: apache/airflow:2.7.3
    environment:
      - AIRFLOW__CORE__EXECUTOR=LocalExecutor
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql://mlops:mlops@postgres:5432/mlops
      - AIRFLOW__CORE__DAGS_FOLDER=/opt/airflow/dags
      - AIRFLOW__CORE__LOAD_EXAMPLES=False
    volumes:
      - ./airflow_dags:/opt/airflow/dags
      - airflow_logs:/opt/airflow/logs
    depends_on:
      - postgres
      - airflow-webserver
    networks:
      - mlops-network
    restart: unless-stopped
    command: airflow scheduler

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - mlops-network
    restart: unless-stopped

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    networks:
      - mlops-network
    restart: unless-stopped

  # MinIO (S3-compatible storage for MLflow artifacts)
  minio:
    image: minio/minio:latest
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      - MINIO_ROOT_USER=minioadmin
      - MINIO_ROOT_PASSWORD=minioadmin
    volumes:
      - minio_data:/data
    command: server /data --console-address ":9001"
    networks:
      - mlops-network
    restart: unless-stopped

  # Jupyter Notebook (for development and experimentation)
  jupyter:
    image: jupyter/scipy-notebook:latest
    ports:
      - "8888:8888"
    environment:
      - JUPYTER_ENABLE_LAB=yes
      - JUPYTER_TOKEN=mlops
    volumes:
      - ./notebooks:/home/jovyan/work
      - ./data:/home/jovyan/data
    networks:
      - mlops-network
    restart: unless-stopped

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/nginx/ssl
    depends_on:
      - mlops-service
      - airflow-webserver
      - mlflow
      - grafana
      - jupyter
    networks:
      - mlops-network
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
  mlflow_artifacts:
  airflow_logs:
  prometheus_data:
  grafana_data:
  minio_data:

networks:
  mlops-network:
    driver: bridge
