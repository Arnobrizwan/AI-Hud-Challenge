# Docker Build and Push Workflow
# Uncomment and configure when GitHub Actions credits are available

# name: Docker Build and Push

# on:
#   push:
#     branches: [ main, develop ]
#   pull_request:
#     branches: [ main ]

# env:
#   REGISTRY: ghcr.io
#   IMAGE_NAME: ${{ github.repository }}

# jobs:
#   build-and-push:
#     runs-on: ubuntu-latest
#     permissions:
#       contents: read
#       packages: write

#     steps:
#     - name: Checkout repository
#       uses: actions/checkout@v4

#     - name: Set up Docker Buildx
#       uses: docker/setup-buildx-action@v3

#     - name: Log in to Container Registry
#       uses: docker/login-action@v3
#       with:
#         registry: ${{ env.REGISTRY }}
#         username: ${{ github.actor }}
#         password: ${{ secrets.GITHUB_TOKEN }}

#     - name: Extract metadata
#       id: meta
#       uses: docker/metadata-action@v5
#       with:
#         images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
#         tags: |
#           type=ref,event=branch
#           type=ref,event=pr
#           type=sha,prefix={{branch}}-
#           type=raw,value=latest,enable={{is_default_branch}}

#     - name: Build and push Docker image
#       uses: docker/build-push-action@v6
#       with:
#         context: .
#         platforms: linux/amd64,linux/arm64
#         push: ${{ github.event_name != 'pull_request' }}
#         tags: ${{ steps.meta.outputs.tags }}
#         labels: ${{ steps.meta.outputs.labels }}
#         cache-from: type=gha
#         cache-to: type=gha,mode=max
#         build-args: |
#           PYTHON_VERSION=3.11

#     - name: Build individual services
#       run: |
#         # Build each service with optimized caching
#         services=(
#           "ingestion-service"
#           "safety-service"
#           "content-extraction-service"
#           "content-enrichment-service"
#           "deduplication-service"
#           "summarization-service"
#           "personalization-service"
#           "notification-service"
#           "feedback-service"
#           "evaluation-service"
#           "mlops-orchestration-service"
#           "storage-service"
#           "observability-service"
#         )
#         
#         for service in "${services[@]}"; do
#           echo "Building $service..."
#           docker buildx build \
#             --platform linux/amd64,linux/arm64 \
#             --cache-from type=gha \
#             --cache-to type=gha,mode=max \
#             --tag ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-$service:${{ github.sha }} \
#             --tag ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-$service:latest \
#             --push \
#             ./$service/
#         done

#     - name: Run security scan
#       uses: aquasecurity/trivy-action@master
#       with:
#         image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
#         format: 'sarif'
#         output: 'trivy-results.sarif'

#     - name: Upload Trivy scan results
#       uses: github/codeql-action/upload-sarif@v3
#       if: always()
#       with:
#         sarif_file: 'trivy-results.sarif'
