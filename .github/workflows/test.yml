name: Test Suite

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.11', '3.12']
        service: [
          "content-enrichment-service",
          "content-extraction-service",
          "deduplication-service",
          "evaluation-service",
          "feedback-service",
          "ingestion-service",
          "mlops-orchestration-service",
          "notification-service",
          "observability-service",
          "personalization-service",
          "safety-service",
          "storage-service",
          "summarization-service"
        ]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v6
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles(format('{0}/requirements.txt', matrix.service)) }}
        restore-keys: |
          ${{ runner.os }}-pip-${{ matrix.python-version }}-
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f "${{ matrix.service }}/requirements.txt" ]; then
          pip install -r ${{ matrix.service }}/requirements.txt
        else
          pip install -r requirements.txt
        fi

    - name: Run unit tests
      run: |
        cd ${{ matrix.service }}
        if [ -d "src/tests" ] || [ -d "tests" ]; then
          pytest -v --tb=short -m "not integration and not slow" --cov=src --cov-report=xml --cov-report=html --junitxml=test-results.xml
        else
          echo "No tests found for ${{ matrix.service }}"
        fi

    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results-${{ matrix.service }}-py${{ matrix.python-version }}
        path: |
          ${{ matrix.service }}/test-results.xml
          ${{ matrix.service }}/htmlcov/
          ${{ matrix.service }}/coverage.xml

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      if: matrix.python-version == '3.11'
      with:
        file: ./${{ matrix.service }}/coverage.xml
        flags: unittests,${{ matrix.service }}
        name: codecov-${{ matrix.service }}

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: unit-tests
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      elasticsearch:
        image: elasticsearch:8.11.0
        env:
          discovery.type: single-node
          xpack.security.enabled: false
          ES_JAVA_OPTS: "-Xms512m -Xmx512m"
        ports:
          - 9200:9200
        options: >-
          --health-cmd "curl -f http://localhost:9200/_cluster/health || exit 1"
          --health-interval 30s
          --health-timeout 10s
          --health-retries 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v6
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest-xdist pytest-mock

    - name: Wait for services
      run: |
        sleep 30
        redis-cli -h localhost -p 6379 ping
        pg_isready -h localhost -p 5432 -U postgres
        curl -f http://localhost:9200/_cluster/health

    - name: Run integration tests
      run: |
        pytest tests/ -v --tb=short -m integration --junitxml=integration-test-results.xml

    - name: Upload integration test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: integration-test-results
        path: integration-test-results.xml

  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: integration-tests
    if: github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/main'
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v6
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install locust pytest-benchmark

    - name: Run performance tests
      run: |
        # Add performance testing commands here
        echo "Running performance tests..."
        # locust --headless --users 10 --spawn-rate 1 --run-time 60s --host http://localhost:8000

    - name: Upload performance results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: performance-results
        path: performance-results.json

  load-tests:
    name: Load Tests
    runs-on: ubuntu-latest
    needs: integration-tests
    if: github.ref == 'refs/heads/main'
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v6
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install locust

    - name: Run load tests
      run: |
        echo "Running load tests..."
        # Add load testing commands here

  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests, performance-tests]
    if: always()
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v3

    - name: Generate test summary
      run: |
        echo "## Test Results Summary" >> $GITHUB_STEP_SUMMARY
        echo "| Service | Status | Coverage |" >> $GITHUB_STEP_SUMMARY
        echo "|---------|--------|----------|" >> $GITHUB_STEP_SUMMARY
        # Add logic to parse test results and generate summary