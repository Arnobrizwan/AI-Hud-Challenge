# .github/workflows/deploy-production.yml
name: 🚀 Deploy News Hub Pipeline

on:
  push:
    branches: [main]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  GCP_SA_KEY: ${{ secrets.GCP_SA_KEY }}
  REGISTRY: gcr.io
  REGION: us-central1

jobs:
  # ==================== BUILD ALL SERVICES ====================
  build:
    name: 🏗️ Build & Push All Services
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service:
          - safety-service
          - ingestion-service
          - content-extraction-service
          - content-enrichment-service
          - deduplication-service
          - src
          - summarization-service
          - personalization-service
          - notification-service
          - feedback-service
          - evaluation-service
          - mlops-orchestration-service
          - storage-service
          - realtime-interface-service
          - observability-service
    outputs:
      image-tags: ${{ steps.image-tags.outputs.tags }}
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🔐 Setup Google Cloud
      uses: google-github-actions/setup-gcloud@v1
      with:
        service_account_key: ${{ secrets.GCP_SA_KEY }}
        project_id: ${{ env.PROJECT_ID }}

    - name: 🐳 Configure Docker
      run: gcloud auth configure-docker

    - name: 🏗️ Build and Push ${{ matrix.service }}
      run: |
        IMAGE_TAG="${REGISTRY}/${PROJECT_ID}/${{ matrix.service }}:${GITHUB_SHA::8}"
        docker build -t $IMAGE_TAG ./${{ matrix.service }}
        docker push $IMAGE_TAG
        echo "Built and pushed: $IMAGE_TAG"

    - name: 📝 Output image tags
      id: image-tags
      run: |
        echo "tags=${REGISTRY}/${PROJECT_ID}/${{ matrix.service }}:${GITHUB_SHA::8}" >> $GITHUB_OUTPUT

  # ==================== RUN TESTS ====================
  test:
    name: 🧪 Run All Tests
    runs-on: ubuntu-latest
    needs: build
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🐍 Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: 📦 Install dependencies
      run: |
        pip install -r requirements.txt

    - name: 🧪 Run unit tests
      run: |
        pytest tests/ -v --cov=./ --cov-report=xml

    - name: 🔗 Run integration tests
      run: |
        docker-compose -f docker-compose.test.yml up --abort-on-container-exit
        docker-compose -f docker-compose.test.yml down

    - name: 📊 Upload coverage
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml

  # ==================== DEPLOY INFRASTRUCTURE ====================
  deploy-infrastructure:
    name: 🏗️ Deploy Infrastructure
    runs-on: ubuntu-latest
    needs: [build, test]
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🔐 Setup Google Cloud
      uses: google-github-actions/setup-gcloud@v1
      with:
        service_account_key: ${{ secrets.GCP_SA_KEY }}
        project_id: ${{ env.PROJECT_ID }}

    - name: 🏗️ Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: 1.5.0

    - name: 🔧 Terraform Init
      run: |
        cd deployment/terraform/
        terraform init

    - name: 📋 Terraform Plan
      run: |
        cd deployment/terraform/
        terraform plan -var="project_id=$PROJECT_ID" -var="region=$REGION"

    - name: 🚀 Terraform Apply
      run: |
        cd deployment/terraform/
        terraform apply -auto-approve -var="project_id=$PROJECT_ID" -var="region=$REGION"

  # ==================== DEPLOY SERVICES ====================
  deploy-services:
    name: 🚀 Deploy All Services
    runs-on: ubuntu-latest
    needs: [build, test, deploy-infrastructure]
    strategy:
      matrix:
        service:
          - safety-service
          - ingestion-service
          - content-extraction-service
          - content-enrichment-service
          - deduplication-service
          - src
          - summarization-service
          - personalization-service
          - notification-service
          - feedback-service
          - evaluation-service
          - mlops-orchestration-service
          - storage-service
          - realtime-interface-service
          - observability-service

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🔐 Setup Google Cloud
      uses: google-github-actions/setup-gcloud@v1
      with:
        service_account_key: ${{ secrets.GCP_SA_KEY }}
        project_id: ${{ env.PROJECT_ID }}

    - name: 🚀 Deploy to Cloud Run
      run: |
        IMAGE_TAG="${REGISTRY}/${PROJECT_ID}/${{ matrix.service }}:${GITHUB_SHA::8}"
        
        gcloud run deploy ${{ matrix.service }} \
          --image=$IMAGE_TAG \
          --platform=managed \
          --region=$REGION \
          --allow-unauthenticated \
          --memory=1Gi \
          --cpu=1 \
          --min-instances=0 \
          --max-instances=100 \
          --concurrency=1000 \
          --timeout=900 \
          --set-env-vars="ENVIRONMENT=production"

    - name: ✅ Verify deployment
      run: |
        SERVICE_URL=$(gcloud run services describe ${{ matrix.service }} --region=$REGION --format="value(status.url)")
        echo "Service deployed at: $SERVICE_URL"
        curl -f "$SERVICE_URL/health" || exit 1

  # ==================== POST-DEPLOYMENT ====================
  post-deployment:
    name: 🔍 Post-Deployment Checks
    runs-on: ubuntu-latest
    needs: deploy-services
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🔐 Setup Google Cloud
      uses: google-github-actions/setup-gcloud@v1
      with:
        service_account_key: ${{ secrets.GCP_SA_KEY }}
        project_id: ${{ env.PROJECT_ID }}

    - name: 🧪 Run smoke tests
      run: |
        python scripts/smoke_tests.py --environment=production

    - name: 📊 Update monitoring dashboards
      run: |
        python scripts/update_dashboards.py

    - name: 📨 Send deployment notification
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        text: '🚀 News Hub Pipeline deployed successfully!'
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      if: always()

  # ==================== ROLLBACK (if needed) ====================
  rollback:
    name: 🔄 Rollback on Failure
    runs-on: ubuntu-latest
    needs: [deploy-services, post-deployment]
    if: failure()
    
    steps:
    - name: 🔄 Rollback services
      run: |
        echo "Deployment failed, initiating rollback..."
        # Add rollback logic here
        gcloud run services update-traffic api-gateway --to-revisions=PREVIOUS=100 --region=$REGION
