# Docker Compose for local development environment
version: '3.8'

services:
  # Main application service
  app:
    build:
      context: ..
      dockerfile: deployment/Dockerfile
      target: development
      args:
        BUILD_ENV: development
        APP_VERSION: 1.0.0-dev
        BUILD_DATE: ${BUILD_DATE:-}
        VCS_REF: ${VCS_REF:-}
    ports:
      - "8080:8080"
    environment:
      # Application settings
      - ENVIRONMENT=development
      - DEBUG=true
      - LOG_LEVEL=DEBUG
      - LOG_FORMAT=text
      
      # Server settings
      - HOST=0.0.0.0
      - PORT=8080
      - WORKERS=1
      
      # Security
      - SECRET_KEY=your-super-secret-development-key-change-in-production
      - JWT_ALGORITHM=HS256
      - JWT_EXPIRE_MINUTES=30
      
      # Redis settings
      - REDIS_URL=redis://redis:6379/0
      - REDIS_MAX_CONNECTIONS=20
      
      # Rate limiting
      - RATE_LIMIT_PER_USER=1000
      - RATE_LIMIT_PER_IP=10000
      - RATE_LIMIT_WINDOW_SECONDS=60
      
      # Firebase settings (set these in .env file)
      - FIREBASE_PROJECT_ID=${FIREBASE_PROJECT_ID:-}
      - FIREBASE_CREDENTIALS_JSON=${FIREBASE_CREDENTIALS_JSON:-}
      
      # CORS settings
      - CORS_ORIGINS=["http://localhost:3000", "http://localhost:8080", "http://localhost:8081"]
      - CORS_CREDENTIALS=true
      
      # Features
      - ENABLE_METRICS=true
      - ENABLE_SECURITY_HEADERS=true
      - HEALTH_CHECK_DEPENDENCIES=true
      
      # Request settings
      - MAX_REQUEST_SIZE=10485760
      - REQUEST_TIMEOUT=30
    volumes:
      - ../src:/app/src:ro
      - app_logs:/app/logs
    depends_on:
      - redis
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health/live"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
  
  # Redis for rate limiting and caching
  redis:
    image: redis:7.2-alpine
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
      - ./redis.conf:/etc/redis/redis.conf:ro
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Prometheus for metrics collection (optional)
  prometheus:
    image: prom/prometheus:v2.48.0
    ports:
      - "9090:9090"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--web.enable-lifecycle'
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - app-network
    restart: unless-stopped
    profiles:
      - monitoring

  # Grafana for metrics visualization (optional)
  grafana:
    image: grafana/grafana:10.2.2
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/dashboards:/var/lib/grafana/dashboards:ro
      - ./grafana/provisioning:/etc/grafana/provisioning:ro
    networks:
      - app-network
    restart: unless-stopped
    profiles:
      - monitoring

  # Nginx reverse proxy (optional)
  nginx:
    image: nginx:1.25-alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - app
    networks:
      - app-network
    restart: unless-stopped
    profiles:
      - proxy

volumes:
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  app_logs:
    driver: local

networks:
  app-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
